"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.app = void 0;
const express = require("express");
const bodyParser = require("body-parser");
const sequelize = require("sequelize");
const timeout = require("connect-timeout");
const v1_1 = require("./routers/api/v1");
const logger_1 = require("./logger/logger");
const fetch_options_1 = require("./middleware/fetch-options");
const request_timeout_1 = require("./middleware/request-timeout");
const request_dad_1 = require("./middleware/request-dad");
const request_log_1 = require("./middleware/request-log");
const config = require("config");
const sequelizeConnction = require("./common/models")();
exports.app = express();
// 设置超时时间
exports.app.use(timeout("600s"));
// 跨域快速返回
exports.app.use(fetch_options_1.fetchOptions);
// 处理超时
exports.app.use(request_timeout_1.requestTimeout);
// for parsing application/json
exports.app.use(bodyParser.json({ limit: "10mb" }));
// for parsing application/x-www-form-urlencoded
exports.app.use(bodyParser.urlencoded({ extended: true }));
// 业务路由
exports.app.use("/api/v1", v1_1.v1);
// 所有路由都未匹配（404）
exports.app.use("*", request_dad_1.requestDad);
// request log
exports.app.use(request_log_1.requestLog);
//  程序启动
const globalAny = global;
globalAny.db = sequelizeConnction;
globalAny.db.query("select name from system where code = 'manage';", { type: sequelize.QueryTypes.SELECT })
    .then((data) => {
    exports.app.listen(3000, () => {
        console.info(`app start ${process.env.HOST_IP}:3000`);
    });
}, (err) => {
    console.error("数据库连接失败：", err);
});
// uncaughtException 避免程序崩溃
process.on("uncaughtException", function (err) {
    logger_1.AppLogger.error("未知异常:" + err);
});
process.on("unhandledRejection", function (err, promise) {
    logger_1.AppLogger.error("未知异常:", err, promise);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBbUM7QUFDbkMsMENBQTBDO0FBQzFDLHVDQUF1QztBQUN2QywyQ0FBMkM7QUFDM0MseUNBQW9DO0FBQ3BDLDRDQUE0QztBQUM1Qyw4REFBMEQ7QUFDMUQsa0VBQThEO0FBQzlELDBEQUFzRDtBQUN0RCwwREFBc0Q7QUFDdEQsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2pDLE1BQU0sa0JBQWtCLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztBQUc3QyxRQUFBLEdBQUcsR0FBd0IsT0FBTyxFQUFFLENBQUM7QUFDaEQsU0FBUztBQUNULFdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDekIsU0FBUztBQUNULFdBQUcsQ0FBQyxHQUFHLENBQUMsNEJBQVksQ0FBQyxDQUFDO0FBQ3RCLE9BQU87QUFDUCxXQUFHLENBQUMsR0FBRyxDQUFDLGdDQUFjLENBQUMsQ0FBQztBQUN4QiwrQkFBK0I7QUFDL0IsV0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM1QyxnREFBZ0Q7QUFDaEQsV0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNuRCxPQUFPO0FBQ1AsV0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsT0FBRSxDQUFDLENBQUM7QUFDdkIsZ0JBQWdCO0FBQ2hCLFdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLHdCQUFVLENBQUMsQ0FBQztBQUN6QixjQUFjO0FBQ2QsV0FBRyxDQUFDLEdBQUcsQ0FBQyx3QkFBVSxDQUFDLENBQUM7QUFFcEIsUUFBUTtBQUNSLE1BQU0sU0FBUyxHQUFRLE1BQU0sQ0FBQztBQUM5QixTQUFTLENBQUMsRUFBRSxHQUFHLGtCQUFrQixDQUFDO0FBQ2xDLFNBQVMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLGdEQUFnRCxFQUFFLEVBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFDLENBQUM7S0FDcEcsSUFBSSxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUU7SUFDaEIsV0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFO1FBQ2xCLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sT0FBTyxDQUFDLENBQUM7SUFDMUQsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLEVBQUUsQ0FBQyxHQUFRLEVBQUUsRUFBRTtJQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ25DLENBQUMsQ0FBQyxDQUFDO0FBR1AsMkJBQTJCO0FBQzNCLE9BQU8sQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsVUFBVSxHQUFHO0lBQ3pDLGtCQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsQ0FBQztBQUNuQyxDQUFDLENBQUMsQ0FBQztBQUVILE9BQU8sQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsVUFBVSxHQUFHLEVBQUUsT0FBTztJQUNuRCxrQkFBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzNDLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCAqIGFzIGJvZHlQYXJzZXIgZnJvbSBcImJvZHktcGFyc2VyXCI7XG5pbXBvcnQgKiBhcyBzZXF1ZWxpemUgZnJvbSBcInNlcXVlbGl6ZVwiO1xuaW1wb3J0ICogYXMgdGltZW91dCBmcm9tIFwiY29ubmVjdC10aW1lb3V0XCI7XG5pbXBvcnQge3YxfSBmcm9tIFwiLi9yb3V0ZXJzL2FwaS92MVwiO1xuaW1wb3J0IHsgQXBwTG9nZ2VyIH0gZnJvbSBcIi4vbG9nZ2VyL2xvZ2dlclwiO1xuaW1wb3J0IHsgZmV0Y2hPcHRpb25zIH0gZnJvbSBcIi4vbWlkZGxld2FyZS9mZXRjaC1vcHRpb25zXCI7XG5pbXBvcnQgeyByZXF1ZXN0VGltZW91dCB9IGZyb20gXCIuL21pZGRsZXdhcmUvcmVxdWVzdC10aW1lb3V0XCI7XG5pbXBvcnQgeyByZXF1ZXN0RGFkIH0gZnJvbSBcIi4vbWlkZGxld2FyZS9yZXF1ZXN0LWRhZFwiO1xuaW1wb3J0IHsgcmVxdWVzdExvZyB9IGZyb20gXCIuL21pZGRsZXdhcmUvcmVxdWVzdC1sb2dcIjtcbmNvbnN0IGNvbmZpZyA9IHJlcXVpcmUoXCJjb25maWdcIik7XG5jb25zdCBzZXF1ZWxpemVDb25uY3Rpb24gPSByZXF1aXJlKFwiLi9jb21tb24vbW9kZWxzXCIpKCk7XG5cblxuZXhwb3J0IGxldCBhcHA6IGV4cHJlc3MuQXBwbGljYXRpb24gPSBleHByZXNzKCk7XG4vLyDorr7nva7otoXml7bml7bpl7RcbmFwcC51c2UodGltZW91dChcIjYwMHNcIikpO1xuLy8g6Leo5Z+f5b+r6YCf6L+U5ZueXG5hcHAudXNlKGZldGNoT3B0aW9ucyk7XG4vLyDlpITnkIbotoXml7ZcbmFwcC51c2UocmVxdWVzdFRpbWVvdXQpO1xuLy8gZm9yIHBhcnNpbmcgYXBwbGljYXRpb24vanNvblxuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oeyBsaW1pdDogXCIxMG1iXCIgfSkpO1xuLy8gZm9yIHBhcnNpbmcgYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXG5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKTtcbi8vIOS4muWKoei3r+eUsVxuYXBwLnVzZShcIi9hcGkvdjFcIiwgdjEpO1xuLy8g5omA5pyJ6Lev55Sx6YO95pyq5Yy56YWN77yINDA077yJXG5hcHAudXNlKFwiKlwiLCByZXF1ZXN0RGFkKTtcbi8vIHJlcXVlc3QgbG9nXG5hcHAudXNlKHJlcXVlc3RMb2cpO1xuXG4vLyAg56iL5bqP5ZCv5YqoXG5jb25zdCBnbG9iYWxBbnk6IGFueSA9IGdsb2JhbDtcbmdsb2JhbEFueS5kYiA9IHNlcXVlbGl6ZUNvbm5jdGlvbjtcbmdsb2JhbEFueS5kYi5xdWVyeShcInNlbGVjdCBuYW1lIGZyb20gc3lzdGVtIHdoZXJlIGNvZGUgPSAnbWFuYWdlJztcIiwge3R5cGU6IHNlcXVlbGl6ZS5RdWVyeVR5cGVzLlNFTEVDVH0pXG4gICAgLnRoZW4oKGRhdGE6IGFueSkgPT4ge1xuICAgICAgICBhcHAubGlzdGVuKDMwMDAsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhgYXBwIHN0YXJ0ICR7cHJvY2Vzcy5lbnYuSE9TVF9JUH06MzAwMGApO1xuICAgICAgICB9KTtcbiAgICB9LCAoZXJyOiBhbnkpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIuaVsOaNruW6k+i/nuaOpeWksei0pe+8mlwiLCBlcnIpO1xuICAgIH0pO1xuXG5cbi8vIHVuY2F1Z2h0RXhjZXB0aW9uIOmBv+WFjeeoi+W6j+W0qea6g1xucHJvY2Vzcy5vbihcInVuY2F1Z2h0RXhjZXB0aW9uXCIsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBBcHBMb2dnZXIuZXJyb3IoXCLmnKrnn6XlvILluLg6XCIgKyBlcnIpO1xufSk7XG5cbnByb2Nlc3Mub24oXCJ1bmhhbmRsZWRSZWplY3Rpb25cIiwgZnVuY3Rpb24gKGVyciwgcHJvbWlzZSkge1xuICAgIEFwcExvZ2dlci5lcnJvcihcIuacquefpeW8guW4uDpcIiwgZXJyLCBwcm9taXNlKTtcbn0pOyJdfQ==
